
#include <iostream>
#include<cmath>
using namespace std;
int main() 
{
	int n;//表示数的位数  
	int start,end;//表示n位数的起始值和终点
	int m;//待分解各位的数，即待判断的数
	int digit;//某个数位的值
	int sum;//各位数的n次方的和
	int i;//循环变量，待检验的数 
	
	cout<<"求自幂数，请输入n位数的n：" <<endl;
	cin>>n;
	
	while(n>0)
	{
		start=pow(10,n-1);end=pow(10,n)-1;
		//例如n=3时，（start，end）就是（100,999）即所有的三位数。
		cout<<n<<"位自幂数有:"<<endl;
		
		for (i=start;i<=end;i+=1)
		{
			m=i;
			sum=0;
			while(m!=0)
			{
				digit=m%10;
				sum+=pow(digit,n);
				m/=10;
			}
			if(sum==i)
			{	cout<<sum<<"  " ;	}
		}
		cout<<endl;
		cout<<"求自幂数，请输入n位数的n："<<endl  ;
		cin>>n;
	
	}
	return 0; 
} 

/*用户输入位数n，找出并显示出所有n位的自幂数。
数学家发现了很多有趣的数字。
比如，153，一个普通的三位数，然而13 + 53 + 33=153,即它的各位数字的三次方的和等于这个数本身。

个n位正整数，如果它的各位数字的n次方的和加起来还等于这个数。数学家称这样的数为自幂数，也叫自恋数。

n为1时，自幂数称为独身，0,1,2,3,4,5,6,7,8,9都是自幂数。
n为2时，没有自幂数。
n为3时，自幂数称为水仙花数，153就是一个水仙花数。
n=4,称为四叶玫瑰数。
n=5,称为五角星数。
n=6,称为六合数。
n=7,称为北斗七星数。
n=8,称为八仙数。
n=9,称为九九重阳数。

(问题分析)
 
两个要点，一是怎样找出“各位”，二是n次方的计算。
n次方的计算有一个数学函数可用，pow(x,n)。
找出各位，举例来说，153，找个位，可用153%10=3; 找十位呢?
(153/10)%10=5,依次类推。
构造最小n位数。0是是最小的一位数，10的1次方是最小的两位数，
10的平方是最小的三位数，那么，10的n-1次方就是最小的n位数。*/
